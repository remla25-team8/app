name: Manual Pre-release Creation

on:
  workflow_dispatch:
    inputs:
      base_version:
        description: 'Base version for pre-release (e.g., 1.2.3 - without v prefix)'
        required: true
        type: string
      description:
        description: 'Description of changes in this pre-release'
        required: false
        type: string
        default: 'Manual pre-release iteration'

jobs:
  create-manual-prerelease:
    runs-on: ubuntu-latest
    permissions:
      contents: write # For creating releases and tags
      packages: write # For pushing to GHCR

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_GITHUB_TOKEN }}

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Validate version format
        run: |
          BASE_VERSION="${{ github.event.inputs.base_version }}"
          if [[ ! "$BASE_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $BASE_VERSION"
            echo "Please use format: x.y.z (e.g., 1.2.3)"
            exit 1
          fi
          echo "✅ Version format is valid: $BASE_VERSION"

      - name: Find next pre-release iteration
        id: next-iteration
        run: |
          BASE_VERSION="${{ github.event.inputs.base_version }}"
          echo "Looking for existing pre-release tags for version $BASE_VERSION"
          
          # Get all existing pre-release tags for this base version
          EXISTING_TAGS=$(git tag -l "v$BASE_VERSION-pre-*" | sort -V)
          echo "Existing pre-release tags:"
          if [ -n "$EXISTING_TAGS" ]; then
            echo "$EXISTING_TAGS"
          else
            echo "None found"
          fi
          
          # Find the highest iteration number
          HIGHEST_ITERATION=0
          if [ -n "$EXISTING_TAGS" ]; then
            for tag in $EXISTING_TAGS; do
              # Extract iteration number from tag (e.g., v1.2.3-pre-5 -> 5)
              ITERATION=$(echo "$tag" | sed -n 's/.*-pre-\([0-9]*\)$/\1/p')
              if [ -n "$ITERATION" ] && [ "$ITERATION" -gt "$HIGHEST_ITERATION" ]; then
                HIGHEST_ITERATION=$ITERATION
              fi
            done
          fi
          
          # Calculate next iteration
          NEXT_ITERATION=$((HIGHEST_ITERATION + 1))
          NEXT_PRE_VERSION="v$BASE_VERSION-pre-$NEXT_ITERATION"
          
          echo "Highest existing iteration: $HIGHEST_ITERATION"
          echo "Next iteration: $NEXT_ITERATION"
          echo "Next pre-release version: $NEXT_PRE_VERSION"
          
          echo "NEXT_VERSION=$NEXT_PRE_VERSION" >> $GITHUB_OUTPUT
          echo "ITERATION_NUMBER=$NEXT_ITERATION" >> $GITHUB_OUTPUT
          echo "BASE_VERSION=$BASE_VERSION" >> $GITHUB_OUTPUT

      - name: Create pre-release tag
        run: |
          NEXT_VERSION="${{ steps.next-iteration.outputs.NEXT_VERSION }}"
          DESCRIPTION="${{ github.event.inputs.description }}"
          
          echo "Creating tag: $NEXT_VERSION"
          
          COMMIT_MESSAGE="Manual pre-release $NEXT_VERSION"
          if [ -n "$DESCRIPTION" ]; then
            COMMIT_MESSAGE="$COMMIT_MESSAGE - $DESCRIPTION"
          fi
          
          git tag -a "$NEXT_VERSION" -m "$COMMIT_MESSAGE"
          git push origin "$NEXT_VERSION"

      - name: Create GitHub Pre-Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.PAT_GITHUB_TOKEN }}
          draft: false
          prerelease: true
          tag_name: ${{ steps.next-iteration.outputs.NEXT_VERSION }}
          name: Pre-release ${{ steps.next-iteration.outputs.NEXT_VERSION }}
          body: |
            # Pre-release ${{ steps.next-iteration.outputs.NEXT_VERSION }}
            
            🚀 This is a **manual pre-release** created via workflow dispatch.
            
            **Base Version:** ${{ steps.next-iteration.outputs.BASE_VERSION }}  
            **Iteration:** #${{ steps.next-iteration.outputs.ITERATION_NUMBER }}  
            **Created by:** @${{ github.actor }}
            
            ## Description
            
            ${{ github.event.inputs.description || 'No description provided.' }}
            
            ## Docker Images
            
            - `ghcr.io/${{ github.repository_owner }}/app:${{ steps.next-iteration.outputs.NEXT_VERSION }}`
            - `ghcr.io/${{ github.repository_owner }}/app:latest-pre`
            
            ## Usage
            
            ```bash
            # Pull the specific pre-release version
            docker pull ghcr.io/${{ github.repository_owner }}/app:${{ steps.next-iteration.outputs.NEXT_VERSION }}
            
            # Or pull the latest pre-release
            docker pull ghcr.io/${{ github.repository_owner }}/app:latest-pre
            
            # Run the container
            docker run -p 8080:8080 -e MODEL_SERVICE_URL=http://model-service:5000 ghcr.io/${{ github.repository_owner }}/app:${{ steps.next-iteration.outputs.NEXT_VERSION }}
            ```
            
            ## Installation & Testing
            
            ```bash
            # Clone and test locally
            git checkout ${{ steps.next-iteration.outputs.NEXT_VERSION }}
            pip install -r requirements.txt
            python app.py
            ```
            
            ---
            
            > **Note:** This is a pre-release version intended for testing purposes. 
            > Please report any issues you encounter to help us improve the upcoming stable release. 